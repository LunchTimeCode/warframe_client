/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`search_acolytes_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchAcolytesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_arcanes_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchArcanesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_conclaves_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchConclavesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_drops_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchDropsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_events_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchEventsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_factions_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchFactionsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_fissures_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchFissuresDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_item_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchItemDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_items_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchItemsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_languages_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchLanguagesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_mission_types_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchMissionTypesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_mod_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchModDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_mods_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchModsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_nodes_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchNodesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_operations_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchOperationsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_sorties_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchSortiesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_syndicates_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchSyndicatesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_tutorials_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchTutorialsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_upgrade_types_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchUpgradeTypesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_warframe_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchWarframeDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_warframes_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchWarframesDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_weapon_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchWeaponDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_weapons_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchWeaponsDataError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}


/// Persistent Enemy translation information for aiding translation of identifiers.
pub async fn search_acolytes_data(configuration: &configuration::Configuration, query: &str) -> Result<models::AcolyteI18n, Error<SearchAcolytesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/persistentEnemy/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AcolyteI18n`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AcolyteI18n`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchAcolytesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Available Arcane Enhancements
pub async fn search_arcanes_data(configuration: &configuration::Configuration, query: &str) -> Result<Vec<models::Arcane>, Error<SearchArcanesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/arcanes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Arcane&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Arcane&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchArcanesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Data about conclave challenges
pub async fn search_conclaves_data(configuration: &configuration::Configuration, query: &str) -> Result<models::Conclave, Error<SearchConclavesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/conclave/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Conclave`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Conclave`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchConclavesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Percentages for Warframe drops in different areas of the game
pub async fn search_drops_data(configuration: &configuration::Configuration, query: &str) -> Result<Vec<models::DropsInner>, Error<SearchDropsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/drops/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::DropsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::DropsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchDropsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Data about events
pub async fn search_events_data(configuration: &configuration::Configuration, query: &str) -> Result<serde_json::Value, Error<SearchEventsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/events/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchEventsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Strings for translating faction identifiers.
pub async fn search_factions_data(configuration: &configuration::Configuration, query: &str) -> Result<models::Factions, Error<SearchFactionsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/factions/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Factions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Factions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchFactionsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fissure translation identifiers
pub async fn search_fissures_data(configuration: &configuration::Configuration, query: &str) -> Result<models::FissureModifiers, Error<SearchFissuresDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/fissureModifiers/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FissureModifiers`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FissureModifiers`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchFissuresDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Item information.
pub async fn search_item_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<models::Item, Error<SearchItemDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/items/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Item`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Item`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchItemDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Item information, such as name, unique name, type, and image name.
pub async fn search_items_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<Vec<models::ItemsInner>, Error<SearchItemsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/items/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ItemsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ItemsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchItemsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get language strings to assist translation.
pub async fn search_languages_data(configuration: &configuration::Configuration, query: &str) -> Result<models::Languages, Error<SearchLanguagesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/languages/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Languages`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Languages`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchLanguagesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Mission Type information to aid translating identifiers
pub async fn search_mission_types_data(configuration: &configuration::Configuration, query: &str) -> Result<models::MissionTypes, Error<SearchMissionTypesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/missionTypes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MissionTypes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MissionTypes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchMissionTypesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Mod information.
pub async fn search_mod_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<models::Mod, Error<SearchModDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/mods/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Mod`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Mod`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchModDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Mod information, such as name, unique name, type, and image name.
pub async fn search_mods_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<Vec<models::Mod>, Error<SearchModsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/mods/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Mod&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Mod&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchModsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sol Node translation information for aiding the translation of identifiers.
pub async fn search_nodes_data(configuration: &configuration::Configuration, query: &str) -> Result<Vec<models::SolNodeSearchInner>, Error<SearchNodesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/solNodes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SolNodeSearchInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SolNodeSearchInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchNodesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Operation Types information to aid translating identifiers for global upgrades
pub async fn search_operations_data(configuration: &configuration::Configuration, query: &str) -> Result<models::OperationTypes, Error<SearchOperationsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/operationTypes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OperationTypes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OperationTypes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchOperationsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sortie translation information for assisting translation of identifiers.
pub async fn search_sorties_data(configuration: &configuration::Configuration, query: &str) -> Result<models::SortieData, Error<SearchSortiesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/sortie/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SortieData`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SortieData`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchSortiesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Information to assist translating syndicate identifiers.
pub async fn search_syndicates_data(configuration: &configuration::Configuration, query: &str) -> Result<models::Syndicates, Error<SearchSyndicatesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/syndicates/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Syndicates`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Syndicates`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchSyndicatesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Tutorials data from DE
pub async fn search_tutorials_data(configuration: &configuration::Configuration, query: &str) -> Result<Vec<models::TutorialsInner>, Error<SearchTutorialsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/tutorials/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TutorialsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TutorialsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchTutorialsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Upgrade types for what can be changed by global modifiers, such as double credit weekends.
pub async fn search_upgrade_types_data(configuration: &configuration::Configuration, query: &str) -> Result<models::UpgradeTypes, Error<SearchUpgradeTypesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/upgradeTypes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UpgradeTypes`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UpgradeTypes`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchUpgradeTypesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Mod information.
pub async fn search_warframe_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<models::Warframe, Error<SearchWarframeDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/warframes/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Warframe`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Warframe`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchWarframeDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Warframe stats and general information.
pub async fn search_warframes_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<Vec<models::Warframe>, Error<SearchWarframesDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/warframes/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Warframe&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Warframe&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchWarframesDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Mod information.
pub async fn search_weapon_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<models::Weapon, Error<SearchWeaponDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/weapons/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Weapon`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Weapon`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchWeaponDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Weapon statistics.
pub async fn search_weapons_data(configuration: &configuration::Configuration, query: &str, language: models::Language, only: Option<&str>, remove: Option<&str>, by: Option<&str>, accept_language: Option<models::Language>) -> Result<Vec<models::WeaponsInner>, Error<SearchWeaponsDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;
    let p_query_language = language;
    let p_query_only = only;
    let p_query_remove = remove;
    let p_query_by = by;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/weapons/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_query_only {
        req_builder = req_builder.query(&[("only", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_remove {
        req_builder = req_builder.query(&[("remove", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_by {
        req_builder = req_builder.query(&[("by", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::WeaponsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::WeaponsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchWeaponsDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

