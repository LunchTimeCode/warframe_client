/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`get_rivens_by_platform`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRivensByPlatformError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_rivens_by_platform`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchRivensByPlatformError {
    Status400(models::InlineObject),
    Status500(models::InlineObject),
    UnknownValue(serde_json::Value),
}


/// Data about averages, deviations, medians, miniums, and maxes for all rivens for the provided platform
pub async fn get_rivens_by_platform(configuration: &configuration::Configuration, language: models::Language, accept_language: Option<models::Language>) -> Result<std::collections::HashMap<String, models::Riven>, Error<GetRivensByPlatformError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_language = language;
    let p_header_accept_language = accept_language;

    let uri_str = format!("{}/pc/rivens", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("language", &p_query_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_header_accept_language {
        req_builder = req_builder.header("Accept-Language", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `std::collections::HashMap&lt;String, models::Riven&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `std::collections::HashMap&lt;String, models::Riven&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRivensByPlatformError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Data about averages, deviations, medians, miniums, and maxes for rivens whose name match the query for the provided platform
pub async fn search_rivens_by_platform(configuration: &configuration::Configuration, query: &str) -> Result<std::collections::HashMap<String, models::Riven>, Error<SearchRivensByPlatformError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_query = query;

    let uri_str = format!("{}/pc/rivens/search/{query}", configuration.base_path, query=crate::apis::urlencode(p_path_query));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `std::collections::HashMap&lt;String, models::Riven&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `std::collections::HashMap&lt;String, models::Riven&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchRivensByPlatformError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

