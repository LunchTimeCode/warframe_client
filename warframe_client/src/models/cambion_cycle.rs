/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CambionCycle {
    #[serde(rename = "id")]
    pub id: String,
    /// A timestamp in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) representing a specific point in time. This format is commonly used in APIs to ensure consistent date and time representation. The timestamp is in UTC (Coordinated Universal Time) and does not include any timezone offset. It is used to represent events, deadlines, or any time-related information in a standardized way. Example: \"2023-10-01T12:00:00Z\" represents October 1, 2023, at 12:00 PM UTC. 
    #[serde(rename = "expiry")]
    pub expiry: String,
    /// A timestamp in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) representing a specific point in time. This format is commonly used in APIs to ensure consistent date and time representation. The timestamp is in UTC (Coordinated Universal Time) and does not include any timezone offset. It is used to represent events, deadlines, or any time-related information in a standardized way. Example: \"2023-10-01T12:00:00Z\" represents October 1, 2023, at 12:00 PM UTC. 
    #[serde(rename = "activation")]
    pub activation: String,
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<Active>,
}

impl CambionCycle {
    pub fn new(id: String, expiry: String, activation: String, state: State) -> CambionCycle {
        CambionCycle {
            id,
            expiry,
            activation,
            state,
            active: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "vome")]
    Vome,
    #[serde(rename = "fass")]
    Fass,
}

impl Default for State {
    fn default() -> State {
        Self::Vome
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Active {
    #[serde(rename = "vome")]
    Vome,
    #[serde(rename = "fass")]
    Fass,
}

impl Default for Active {
    fn default() -> Active {
        Self::Vome
    }
}

