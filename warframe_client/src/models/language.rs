/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Language : language
/// language
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "de")]
    De,
    #[serde(rename = "es")]
    Es,
    #[serde(rename = "fr")]
    Fr,
    #[serde(rename = "it")]
    It,
    #[serde(rename = "ko")]
    Ko,
    #[serde(rename = "pl")]
    Pl,
    #[serde(rename = "pt")]
    Pt,
    #[serde(rename = "ru")]
    Ru,
    #[serde(rename = "zh")]
    Zh,
    #[serde(rename = "en")]
    En,
    #[serde(rename = "uk")]
    Uk,

}

impl std::fmt::Display for Language {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::De => write!(f, "de"),
            Self::Es => write!(f, "es"),
            Self::Fr => write!(f, "fr"),
            Self::It => write!(f, "it"),
            Self::Ko => write!(f, "ko"),
            Self::Pl => write!(f, "pl"),
            Self::Pt => write!(f, "pt"),
            Self::Ru => write!(f, "ru"),
            Self::Zh => write!(f, "zh"),
            Self::En => write!(f, "en"),
            Self::Uk => write!(f, "uk"),
        }
    }
}

impl Default for Language {
    fn default() -> Language {
        Self::De
    }
}

