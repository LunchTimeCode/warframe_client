/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConclaveChallengesInner {
    #[serde(rename = "mode")]
    pub mode: String,
    #[serde(rename = "amount")]
    pub amount: f64,
    #[serde(rename = "daily")]
    pub daily: bool,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "expiry")]
    pub expiry: String,
    #[serde(rename = "category")]
    pub category: String,
    #[serde(rename = "rootChallenge")]
    pub root_challenge: bool,
}

impl ConclaveChallengesInner {
    pub fn new(mode: String, amount: f64, daily: bool, description: String, id: String, expiry: String, category: String, root_challenge: bool) -> ConclaveChallengesInner {
        ConclaveChallengesInner {
            mode,
            amount,
            daily,
            description,
            id,
            expiry,
            category,
            root_challenge,
        }
    }
}

