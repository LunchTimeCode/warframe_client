/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Profile {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "masteryRank", skip_serializing_if = "Option::is_none")]
    pub mastery_rank: Option<i32>,
    #[serde(rename = "loadout", skip_serializing_if = "Option::is_none")]
    pub loadout: Option<Box<models::Loudout>>,
    #[serde(rename = "intrinsics", skip_serializing_if = "Option::is_none")]
    pub intrinsics: Option<Box<models::ProfileIntrinsics>>,
    #[serde(rename = "challengeProgress", skip_serializing_if = "Option::is_none")]
    pub challenge_progress: Option<Vec<models::ProfileChallengeProgressInner>>,
    #[serde(rename = "guildId", skip_serializing_if = "Option::is_none")]
    pub guild_id: Option<String>,
    #[serde(rename = "guildName", skip_serializing_if = "Option::is_none")]
    pub guild_name: Option<String>,
    #[serde(rename = "guildTier", skip_serializing_if = "Option::is_none")]
    pub guild_tier: Option<i32>,
    #[serde(rename = "guildXp", skip_serializing_if = "Option::is_none")]
    pub guild_xp: Option<i32>,
    #[serde(rename = "guildClass", skip_serializing_if = "Option::is_none")]
    pub guild_class: Option<i32>,
    #[serde(rename = "guildEmblem", skip_serializing_if = "Option::is_none")]
    pub guild_emblem: Option<bool>,
    #[serde(rename = "allianceId", skip_serializing_if = "Option::is_none")]
    pub alliance_id: Option<String>,
    #[serde(rename = "deathMarks", skip_serializing_if = "Option::is_none")]
    pub death_marks: Option<Vec<serde_json::Value>>,
    #[serde(rename = "harvestable", skip_serializing_if = "Option::is_none")]
    pub harvestable: Option<bool>,
    #[serde(rename = "deathSquadable", skip_serializing_if = "Option::is_none")]
    pub death_squadable: Option<bool>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "migratedToConsole", skip_serializing_if = "Option::is_none")]
    pub migrated_to_console: Option<bool>,
    #[serde(rename = "missions", skip_serializing_if = "Option::is_none")]
    pub missions: Option<Vec<models::ProfileMissionsInner>>,
    #[serde(rename = "syndicate", skip_serializing_if = "Option::is_none")]
    pub syndicate: Option<Vec<models::ProfileSyndicateInner>>,
    #[serde(rename = "dailyStanding", skip_serializing_if = "Option::is_none")]
    pub daily_standing: Option<Box<models::DailyStanding>>,
    #[serde(rename = "dailyFocus", skip_serializing_if = "Option::is_none")]
    pub daily_focus: Option<i32>,
    #[serde(rename = "unlockedOperator", skip_serializing_if = "Option::is_none")]
    pub unlocked_operator: Option<bool>,
    #[serde(rename = "unlockedAlignment", skip_serializing_if = "Option::is_none")]
    pub unlocked_alignment: Option<bool>,
    #[serde(rename = "operatorLoadouts", skip_serializing_if = "Option::is_none")]
    pub operator_loadouts: Option<Vec<models::OperatorLoadoutsInner>>,
    #[serde(rename = "alignment", skip_serializing_if = "Option::is_none")]
    pub alignment: Option<Box<models::ProfileAlignment>>,
}

impl Profile {
    pub fn new() -> Profile {
        Profile {
            account_id: None,
            display_name: None,
            mastery_rank: None,
            loadout: None,
            intrinsics: None,
            challenge_progress: None,
            guild_id: None,
            guild_name: None,
            guild_tier: None,
            guild_xp: None,
            guild_class: None,
            guild_emblem: None,
            alliance_id: None,
            death_marks: None,
            harvestable: None,
            death_squadable: None,
            created: None,
            migrated_to_console: None,
            missions: None,
            syndicate: None,
            daily_standing: None,
            daily_focus: None,
            unlocked_operator: None,
            unlocked_alignment: None,
            operator_loadouts: None,
            alignment: None,
        }
    }
}

