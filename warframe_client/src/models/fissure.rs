/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Fissure {
    /// Node name with planet
    #[serde(rename = "node")]
    pub node: String,
    /// Localized mission type
    #[serde(rename = "missionType")]
    pub mission_type: models::MissionType,
    /// Unlocalized mission type
    #[serde(rename = "missionKey", skip_serializing_if = "Option::is_none")]
    pub mission_key: Option<models::MissionType>,
    /// Tier or \"era\" of mission
    #[serde(rename = "tier")]
    pub tier: models::FissureTier,
    /// Numeric tier corresponding to the tier
    #[serde(rename = "tierNum")]
    pub tier_num: f64,
    /// Localized enemy faction name
    #[serde(rename = "enemy")]
    pub enemy: models::Faction,
    /// Always-English enemy faction name, allows keying for standarized displays
    #[serde(rename = "enemyKey", skip_serializing_if = "Option::is_none")]
    pub enemy_key: Option<models::Faction>,
    /// Whether this fissure is a void storm
    #[serde(rename = "isStorm", skip_serializing_if = "Option::is_none")]
    pub is_storm: Option<bool>,
    /// Whether this fissure is on the Steel Path
    #[serde(rename = "isHard", skip_serializing_if = "Option::is_none")]
    pub is_hard: Option<bool>,
}

impl Fissure {
    pub fn new(node: String, mission_type: models::MissionType, tier: models::FissureTier, tier_num: f64, enemy: models::Faction) -> Fissure {
        Fissure {
            node,
            mission_type,
            mission_key: None,
            tier,
            tier_num,
            enemy,
            enemy_key: None,
            is_storm: None,
            is_hard: None,
        }
    }
}

