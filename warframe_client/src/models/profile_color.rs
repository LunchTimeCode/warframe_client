/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProfileColor {
    #[serde(rename = "primary", skip_serializing_if = "Option::is_none")]
    pub primary: Option<Box<models::Palette>>,
    #[serde(rename = "secondary", skip_serializing_if = "Option::is_none")]
    pub secondary: Option<Box<models::Palette>>,
    #[serde(rename = "accents", skip_serializing_if = "Option::is_none")]
    pub accents: Option<Box<models::Palette>>,
    #[serde(rename = "tertiary", skip_serializing_if = "Option::is_none")]
    pub tertiary: Option<Box<models::Palette>>,
    #[serde(rename = "emisssive", skip_serializing_if = "Option::is_none")]
    pub emisssive: Option<Vec<models::Palette>>,
    #[serde(rename = "energy", skip_serializing_if = "Option::is_none")]
    pub energy: Option<Vec<models::Palette>>,
}

impl ProfileColor {
    pub fn new() -> ProfileColor {
        ProfileColor {
            primary: None,
            secondary: None,
            accents: None,
            tertiary: None,
            emisssive: None,
            energy: None,
        }
    }
}

