/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeepArchimedea {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "activation", skip_serializing_if = "Option::is_none")]
    pub activation: Option<String>,
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,
    #[serde(rename = "missions", skip_serializing_if = "Option::is_none")]
    pub missions: Option<Vec<models::DeepArchimedeaMissionsInner>>,
    #[serde(rename = "personalModifiers", skip_serializing_if = "Option::is_none")]
    pub personal_modifiers: Option<Vec<models::DeepArchimedeaCondition>>,
}

impl DeepArchimedea {
    pub fn new() -> DeepArchimedea {
        DeepArchimedea {
            id: None,
            activation: None,
            expiry: None,
            missions: None,
            personal_modifiers: None,
        }
    }
}

