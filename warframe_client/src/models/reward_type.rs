/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RewardType : One of the reward types
/// One of the reward types
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RewardType {
    #[serde(rename = "vauban")]
    Vauban,
    #[serde(rename = "vandal")]
    Vandal,
    #[serde(rename = "wraith")]
    Wraith,
    #[serde(rename = "skin")]
    Skin,
    #[serde(rename = "helmet")]
    Helmet,
    #[serde(rename = "nitain")]
    Nitain,
    #[serde(rename = "mutalist")]
    Mutalist,
    #[serde(rename = "weapon")]
    Weapon,
    #[serde(rename = "fieldron")]
    Fieldron,
    #[serde(rename = "detonite")]
    Detonite,
    #[serde(rename = "mutagen")]
    Mutagen,
    #[serde(rename = "aura")]
    Aura,
    #[serde(rename = "neuralSensors")]
    NeuralSensors,
    #[serde(rename = "orokinCell")]
    OrokinCell,
    #[serde(rename = "alloyPlate")]
    AlloyPlate,
    #[serde(rename = "circuits")]
    Circuits,
    #[serde(rename = "controlModule")]
    ControlModule,
    #[serde(rename = "ferrite")]
    Ferrite,
    #[serde(rename = "gallium")]
    Gallium,
    #[serde(rename = "morphics")]
    Morphics,
    #[serde(rename = "nanoSpores")]
    NanoSpores,
    #[serde(rename = "oxium")]
    Oxium,
    #[serde(rename = "rubedo")]
    Rubedo,
    #[serde(rename = "salvage")]
    Salvage,
    #[serde(rename = "plastids")]
    Plastids,
    #[serde(rename = "polymerBundle")]
    PolymerBundle,
    #[serde(rename = "argonCrystal")]
    ArgonCrystal,
    #[serde(rename = "cryotic")]
    Cryotic,
    #[serde(rename = "tellurium")]
    Tellurium,
    #[serde(rename = "neurodes")]
    Neurodes,
    #[serde(rename = "nightmare")]
    Nightmare,
    #[serde(rename = "endo")]
    Endo,
    #[serde(rename = "reactor")]
    Reactor,
    #[serde(rename = "catalyst")]
    Catalyst,
    #[serde(rename = "forma")]
    Forma,
    #[serde(rename = "synthula")]
    Synthula,
    #[serde(rename = "exilus")]
    Exilus,
    #[serde(rename = "riven")]
    Riven,
    #[serde(rename = "kavatGene")]
    KavatGene,
    #[serde(rename = "kubrowEgg")]
    KubrowEgg,
    #[serde(rename = "traces")]
    Traces,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "credits")]
    Credits,

}

impl std::fmt::Display for RewardType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Vauban => write!(f, "vauban"),
            Self::Vandal => write!(f, "vandal"),
            Self::Wraith => write!(f, "wraith"),
            Self::Skin => write!(f, "skin"),
            Self::Helmet => write!(f, "helmet"),
            Self::Nitain => write!(f, "nitain"),
            Self::Mutalist => write!(f, "mutalist"),
            Self::Weapon => write!(f, "weapon"),
            Self::Fieldron => write!(f, "fieldron"),
            Self::Detonite => write!(f, "detonite"),
            Self::Mutagen => write!(f, "mutagen"),
            Self::Aura => write!(f, "aura"),
            Self::NeuralSensors => write!(f, "neuralSensors"),
            Self::OrokinCell => write!(f, "orokinCell"),
            Self::AlloyPlate => write!(f, "alloyPlate"),
            Self::Circuits => write!(f, "circuits"),
            Self::ControlModule => write!(f, "controlModule"),
            Self::Ferrite => write!(f, "ferrite"),
            Self::Gallium => write!(f, "gallium"),
            Self::Morphics => write!(f, "morphics"),
            Self::NanoSpores => write!(f, "nanoSpores"),
            Self::Oxium => write!(f, "oxium"),
            Self::Rubedo => write!(f, "rubedo"),
            Self::Salvage => write!(f, "salvage"),
            Self::Plastids => write!(f, "plastids"),
            Self::PolymerBundle => write!(f, "polymerBundle"),
            Self::ArgonCrystal => write!(f, "argonCrystal"),
            Self::Cryotic => write!(f, "cryotic"),
            Self::Tellurium => write!(f, "tellurium"),
            Self::Neurodes => write!(f, "neurodes"),
            Self::Nightmare => write!(f, "nightmare"),
            Self::Endo => write!(f, "endo"),
            Self::Reactor => write!(f, "reactor"),
            Self::Catalyst => write!(f, "catalyst"),
            Self::Forma => write!(f, "forma"),
            Self::Synthula => write!(f, "synthula"),
            Self::Exilus => write!(f, "exilus"),
            Self::Riven => write!(f, "riven"),
            Self::KavatGene => write!(f, "kavatGene"),
            Self::KubrowEgg => write!(f, "kubrowEgg"),
            Self::Traces => write!(f, "traces"),
            Self::Other => write!(f, "other"),
            Self::Credits => write!(f, "credits"),
        }
    }
}

impl Default for RewardType {
    fn default() -> RewardType {
        Self::Vauban
    }
}

