/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PersistentEnemiesInner {
    /// Location tag for Acolyte
    #[serde(rename = "locationTag", skip_serializing_if = "Option::is_none")]
    pub location_tag: Option<String>,
    /// Which acolyte it is
    #[serde(rename = "agentType", skip_serializing_if = "Option::is_none")]
    pub agent_type: Option<String>,
    /// Enemy level
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<f64>,
    /// Enemy's remaining health
    #[serde(rename = "healthPercent", skip_serializing_if = "Option::is_none")]
    pub health_percent: Option<f64>,
    /// The percent damage that the enemy takes when it's defeated
    #[serde(rename = "fleeDamage", skip_serializing_if = "Option::is_none")]
    pub flee_damage: Option<f64>,
    /// The region in which the enemy is located
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The time at which the enemy was last discovered
    #[serde(rename = "lastDiscoveredTime", skip_serializing_if = "Option::is_none")]
    pub last_discovered_time: Option<String>,
    /// Node at which the enemy was last discovered
    #[serde(rename = "lastDiscoveredAt", skip_serializing_if = "Option::is_none")]
    pub last_discovered_at: Option<String>,
    /// Whether the enemy is currently discovered
    #[serde(rename = "isDiscovered", skip_serializing_if = "Option::is_none")]
    pub is_discovered: Option<bool>,
    /// Whether the enemy is using 'ticketing'. Unknown usage.
    #[serde(rename = "isUsingTicketing", skip_serializing_if = "Option::is_none")]
    pub is_using_ticketing: Option<bool>,
    /// faux-id incorporating the actual description and Whether the enemy is discovered.
    #[serde(rename = "pid", skip_serializing_if = "Option::is_none")]
    pub pid: Option<String>,
}

impl PersistentEnemiesInner {
    pub fn new() -> PersistentEnemiesInner {
        PersistentEnemiesInner {
            location_tag: None,
            agent_type: None,
            rank: None,
            health_percent: None,
            flee_damage: None,
            region: None,
            last_discovered_time: None,
            last_discovered_at: None,
            is_discovered: None,
            is_using_ticketing: None,
            pid: None,
        }
    }
}

