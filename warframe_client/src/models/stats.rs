/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Stats {
    #[serde(rename = "guildName", skip_serializing_if = "Option::is_none")]
    pub guild_name: Option<String>,
    #[serde(rename = "missionsCompleted", skip_serializing_if = "Option::is_none")]
    pub missions_completed: Option<i32>,
    #[serde(rename = "missionsQuit", skip_serializing_if = "Option::is_none")]
    pub missions_quit: Option<i32>,
    #[serde(rename = "missionsInterrupted", skip_serializing_if = "Option::is_none")]
    pub missions_interrupted: Option<i32>,
    #[serde(rename = "missionsDumped", skip_serializing_if = "Option::is_none")]
    pub missions_dumped: Option<i32>,
    #[serde(rename = "pickupCount", skip_serializing_if = "Option::is_none")]
    pub pickup_count: Option<i32>,
    #[serde(rename = "weapons", skip_serializing_if = "Option::is_none")]
    pub weapons: Option<Vec<models::StatsWeaponsInner>>,
    #[serde(rename = "enemis", skip_serializing_if = "Option::is_none")]
    pub enemis: Option<Vec<models::StatsEnemisInner>>,
    #[serde(rename = "meleeKills", skip_serializing_if = "Option::is_none")]
    pub melee_kills: Option<i32>,
    #[serde(rename = "abilities", skip_serializing_if = "Option::is_none")]
    pub abilities: Option<Vec<models::StatsAbilitiesInner>>,
    #[serde(rename = "ciphersSolved", skip_serializing_if = "Option::is_none")]
    pub ciphers_solved: Option<i32>,
    #[serde(rename = "income", skip_serializing_if = "Option::is_none")]
    pub income: Option<i32>,
    #[serde(rename = "timePlayedSec", skip_serializing_if = "Option::is_none")]
    pub time_played_sec: Option<f64>,
    #[serde(rename = "cipherTime", skip_serializing_if = "Option::is_none")]
    pub cipher_time: Option<i32>,
    #[serde(rename = "rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<i32>,
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "deaths", skip_serializing_if = "Option::is_none")]
    pub deaths: Option<i32>,
    #[serde(rename = "playerLevel", skip_serializing_if = "Option::is_none")]
    pub player_level: Option<i32>,
    #[serde(rename = "missions", skip_serializing_if = "Option::is_none")]
    pub missions: Option<Vec<models::StatsMissionsInner>>,
    #[serde(rename = "healcount", skip_serializing_if = "Option::is_none")]
    pub healcount: Option<i32>,
    #[serde(rename = "breedGrounds", skip_serializing_if = "Option::is_none")]
    pub breed_grounds: Option<serde_json::Value>,
    #[serde(rename = "gradivusDilemma", skip_serializing_if = "Option::is_none")]
    pub gradivus_dilemma: Option<serde_json::Value>,
    #[serde(rename = "scans", skip_serializing_if = "Option::is_none")]
    pub scans: Option<Vec<models::StatsScansInner>>,
    #[serde(rename = "reviveCount", skip_serializing_if = "Option::is_none")]
    pub revive_count: Option<i32>,
    #[serde(rename = "fomorianEventScore", skip_serializing_if = "Option::is_none")]
    pub fomorian_event_score: Option<i32>,
    #[serde(rename = "pvp", skip_serializing_if = "Option::is_none")]
    pub pvp: Option<Vec<models::StatsPvpInner>>,
    #[serde(rename = "lunaro", skip_serializing_if = "Option::is_none")]
    pub lunaro: Option<Box<models::StatsLunaro>>,
    #[serde(rename = "dojoObstacleScore", skip_serializing_if = "Option::is_none")]
    pub dojo_obstacle_score: Option<i32>,
    #[serde(rename = "pvpGamesPendingMask", skip_serializing_if = "Option::is_none")]
    pub pvp_games_pending_mask: Option<i32>,
    #[serde(rename = "pacifismDefect", skip_serializing_if = "Option::is_none")]
    pub pacifism_defect: Option<i32>,
    #[serde(rename = "sentinelGameScore", skip_serializing_if = "Option::is_none")]
    pub sentinel_game_score: Option<i32>,
    #[serde(rename = "amalgamEventScoreMax", skip_serializing_if = "Option::is_none")]
    pub amalgam_event_score_max: Option<i32>,
    #[serde(rename = "scarletSpear", skip_serializing_if = "Option::is_none")]
    pub scarlet_spear: Option<Box<models::StatsScarletSpear>>,
    #[serde(rename = "orphixVenomSpear", skip_serializing_if = "Option::is_none")]
    pub orphix_venom_spear: Option<i32>,
    #[serde(rename = "kDriveRaces", skip_serializing_if = "Option::is_none")]
    pub k_drive_races: Option<Vec<models::StatsKDriveRacesInner>>,
}

impl Stats {
    pub fn new() -> Stats {
        Stats {
            guild_name: None,
            missions_completed: None,
            missions_quit: None,
            missions_interrupted: None,
            missions_dumped: None,
            pickup_count: None,
            weapons: None,
            enemis: None,
            melee_kills: None,
            abilities: None,
            ciphers_solved: None,
            income: None,
            time_played_sec: None,
            cipher_time: None,
            rating: None,
            rank: None,
            deaths: None,
            player_level: None,
            missions: None,
            healcount: None,
            breed_grounds: None,
            gradivus_dilemma: None,
            scans: None,
            revive_count: None,
            fomorian_event_score: None,
            pvp: None,
            lunaro: None,
            dojo_obstacle_score: None,
            pvp_games_pending_mask: None,
            pacifism_defect: None,
            sentinel_game_score: None,
            amalgam_event_score_max: None,
            scarlet_spear: None,
            orphix_venom_spear: None,
            k_drive_races: None,
        }
    }
}

