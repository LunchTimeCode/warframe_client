/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Ws : Full World State Object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Ws {
    /// A timestamp in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) representing a specific point in time. This format is commonly used in APIs to ensure consistent date and time representation. The timestamp is in UTC (Coordinated Universal Time) and does not include any timezone offset. It is used to represent events, deadlines, or any time-related information in a standardized way. Example: \"2023-10-01T12:00:00Z\" represents October 1, 2023, at 12:00 PM UTC. 
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "alerts")]
    pub alerts: Vec<models::AlertsInner>,
    #[serde(rename = "arbitration")]
    pub arbitration: Box<models::Arbitration>,
    #[serde(rename = "archonHunt")]
    pub archon_hunt: Box<models::ArchonHunt>,
    #[serde(rename = "cambionCycle")]
    pub cambion_cycle: Box<models::CambionCycle>,
    #[serde(rename = "cetusCycle")]
    pub cetus_cycle: Box<models::CetusCycle>,
    #[serde(rename = "conclaveChallenges")]
    pub conclave_challenges: Vec<models::ConclaveChallengesInner>,
    #[serde(rename = "constructionProgress")]
    pub construction_progress: Box<models::Construction>,
    #[serde(rename = "dailyDeals")]
    pub daily_deals: Vec<models::DailyDealsInner>,
    #[serde(rename = "darkSectors", skip_serializing_if = "Option::is_none")]
    pub dark_sectors: Option<Vec<models::DarkSectorsInner>>,
    #[serde(rename = "deepArchimedia", skip_serializing_if = "Option::is_none")]
    pub deep_archimedia: Option<Box<models::DeepArchimedea>>,
    #[serde(rename = "earthCycle")]
    pub earth_cycle: Box<models::EarthCycle>,
    #[serde(rename = "events")]
    pub events: Vec<models::Event>,
    #[serde(rename = "fissures", deserialize_with = "Option::deserialize")]
    pub fissures: Option<serde_json::Value>,
    #[serde(rename = "flashSales")]
    pub flash_sales: Box<models::FlashSales>,
    #[serde(rename = "globalUpgrades")]
    pub global_upgrades: Vec<models::GlobalUpgradesInner>,
    #[serde(rename = "invasions")]
    pub invasions: Vec<models::Invasion>,
    #[serde(rename = "kuva", skip_serializing_if = "Option::is_none")]
    pub kuva: Option<Vec<models::Arbitration>>,
    #[serde(rename = "news")]
    pub news: Vec<models::NewsInner>,
    #[serde(rename = "nightwave", skip_serializing_if = "Option::is_none")]
    pub nightwave: Option<Box<models::Nightwave>>,
    #[serde(rename = "persistentEnemies")]
    pub persistent_enemies: Vec<models::PersistentEnemiesInner>,
    #[serde(rename = "sentientOutposts")]
    pub sentient_outposts: Box<models::SentientOutposts>,
    #[serde(rename = "simaris", skip_serializing_if = "Option::is_none")]
    pub simaris: Option<Box<models::Simaris>>,
    #[serde(rename = "sortie")]
    pub sortie: Box<models::Sortie>,
    #[serde(rename = "steelPath")]
    pub steel_path: Box<models::SteelPath>,
    #[serde(rename = "syndicateMissions")]
    pub syndicate_missions: Vec<models::SyndicateMission>,
    #[serde(rename = "vallisCycle")]
    pub vallis_cycle: Box<models::VallisCycle>,
    #[serde(rename = "voidTrader")]
    pub void_trader: Box<models::VoidTrader>,
}

impl Ws {
    /// Full World State Object
    pub fn new(timestamp: String, alerts: Vec<models::AlertsInner>, arbitration: models::Arbitration, archon_hunt: models::ArchonHunt, cambion_cycle: models::CambionCycle, cetus_cycle: models::CetusCycle, conclave_challenges: Vec<models::ConclaveChallengesInner>, construction_progress: models::Construction, daily_deals: Vec<models::DailyDealsInner>, earth_cycle: models::EarthCycle, events: Vec<models::Event>, fissures: Option<serde_json::Value>, flash_sales: models::FlashSales, global_upgrades: Vec<models::GlobalUpgradesInner>, invasions: Vec<models::Invasion>, news: Vec<models::NewsInner>, persistent_enemies: Vec<models::PersistentEnemiesInner>, sentient_outposts: models::SentientOutposts, sortie: models::Sortie, steel_path: models::SteelPath, syndicate_missions: Vec<models::SyndicateMission>, vallis_cycle: models::VallisCycle, void_trader: models::VoidTrader) -> Ws {
        Ws {
            timestamp,
            alerts,
            arbitration: Box::new(arbitration),
            archon_hunt: Box::new(archon_hunt),
            cambion_cycle: Box::new(cambion_cycle),
            cetus_cycle: Box::new(cetus_cycle),
            conclave_challenges,
            construction_progress: Box::new(construction_progress),
            daily_deals,
            dark_sectors: None,
            deep_archimedia: None,
            earth_cycle: Box::new(earth_cycle),
            events,
            fissures,
            flash_sales: Box::new(flash_sales),
            global_upgrades,
            invasions,
            kuva: None,
            news,
            nightwave: None,
            persistent_enemies,
            sentient_outposts: Box::new(sentient_outposts),
            simaris: None,
            sortie: Box::new(sortie),
            steel_path: Box::new(steel_path),
            syndicate_missions,
            vallis_cycle: Box::new(vallis_cycle),
            void_trader: Box::new(void_trader),
        }
    }
}

