/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DailyDealsInner {
    #[serde(rename = "sold")]
    pub sold: f64,
    #[serde(rename = "item")]
    pub item: String,
    #[serde(rename = "uniqueName")]
    pub unique_name: String,
    #[serde(rename = "total")]
    pub total: f64,
    #[serde(rename = "eta")]
    pub eta: String,
    #[serde(rename = "originalPrice")]
    pub original_price: f64,
    #[serde(rename = "salePrice")]
    pub sale_price: f64,
    #[serde(rename = "discount")]
    pub discount: f64,
    #[serde(rename = "expiry")]
    pub expiry: String,
    #[serde(rename = "id")]
    pub id: String,
}

impl DailyDealsInner {
    pub fn new(sold: f64, item: String, unique_name: String, total: f64, eta: String, original_price: f64, sale_price: f64, discount: f64, expiry: String, id: String) -> DailyDealsInner {
        DailyDealsInner {
            sold,
            item,
            unique_name,
            total,
            eta,
            original_price,
            sale_price,
            discount,
            expiry,
            id,
        }
    }
}

