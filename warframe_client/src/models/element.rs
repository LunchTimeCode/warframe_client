/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Element {
    #[serde(rename = "impact")]
    Impact,
    #[serde(rename = "puncture")]
    Puncture,
    #[serde(rename = "slash")]
    Slash,
    #[serde(rename = "heat")]
    Heat,
    #[serde(rename = "cold")]
    Cold,
    #[serde(rename = "electric")]
    Electric,
    #[serde(rename = "toxin")]
    Toxin,
    #[serde(rename = "gas")]
    Gas,
    #[serde(rename = "viral")]
    Viral,
    #[serde(rename = "corrosive")]
    Corrosive,
    #[serde(rename = "blast")]
    Blast,
    #[serde(rename = "magnetic")]
    Magnetic,
    #[serde(rename = "radiation")]
    Radiation,
    #[serde(rename = "true")]
    True,
    #[serde(rename = "void")]
    Void,

}

impl std::fmt::Display for Element {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Impact => write!(f, "impact"),
            Self::Puncture => write!(f, "puncture"),
            Self::Slash => write!(f, "slash"),
            Self::Heat => write!(f, "heat"),
            Self::Cold => write!(f, "cold"),
            Self::Electric => write!(f, "electric"),
            Self::Toxin => write!(f, "toxin"),
            Self::Gas => write!(f, "gas"),
            Self::Viral => write!(f, "viral"),
            Self::Corrosive => write!(f, "corrosive"),
            Self::Blast => write!(f, "blast"),
            Self::Magnetic => write!(f, "magnetic"),
            Self::Radiation => write!(f, "radiation"),
            Self::True => write!(f, "true"),
            Self::Void => write!(f, "void"),
        }
    }
}

impl Default for Element {
    fn default() -> Element {
        Self::Impact
    }
}

