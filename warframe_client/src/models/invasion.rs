/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Invasion {
    /// unique identifier for this object/event/thing
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// ISO-8601 formatted timestamp for when the event began
    #[serde(rename = "activation", skip_serializing_if = "Option::is_none")]
    pub activation: Option<String>,
    /// A timestamp in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) representing a specific point in time. This format is commonly used in APIs to ensure consistent date and time representation. The timestamp is in UTC (Coordinated Universal Time) and does not include any timezone offset. It is used to represent events, deadlines, or any time-related information in a standardized way. Example: \"2023-10-01T12:00:00Z\" represents October 1, 2023, at 12:00 PM UTC. 
    #[serde(rename = "expiry", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<String>,
    #[serde(rename = "attacker", skip_serializing_if = "Option::is_none")]
    pub attacker: Option<Box<models::InvasionAllOfAttacker>>,
    #[serde(rename = "attackerReward", skip_serializing_if = "Option::is_none")]
    pub attacker_reward: Option<Box<models::InvasionAllOfAttackerReward>>,
    #[serde(rename = "attackingFaction")]
    pub attacking_faction: String,
    /// Whether this invasion is \"over\"
    #[serde(rename = "completed")]
    pub completed: bool,
    /// percentage complete as a float value
    #[serde(rename = "completion")]
    pub completion: f64,
    /// How many fights have happened.
    #[serde(rename = "count")]
    pub count: f32,
    #[serde(rename = "defender", skip_serializing_if = "Option::is_none")]
    pub defender: Option<Box<models::InvasionAllOfDefender>>,
    #[serde(rename = "defenderReward", skip_serializing_if = "Option::is_none")]
    pub defender_reward: Option<Box<models::InvasionAllOfDefenderReward>>,
    #[serde(rename = "defendingFaction")]
    pub defending_faction: String,
    /// description of invasion
    #[serde(rename = "desc")]
    pub desc: String,
    /// time string showing approximate time to the end of the invasion
    #[serde(rename = "eta", skip_serializing_if = "Option::is_none")]
    pub eta: Option<String>,
    /// localized Node name
    #[serde(rename = "node")]
    pub node: String,
    /// i18n key for matching node (always english translation)
    #[serde(rename = "nodeKey", skip_serializing_if = "Option::is_none")]
    pub node_key: Option<String>,
    /// How many runs of this mission are needed to qualify for the reward
    #[serde(rename = "requiredRuns")]
    pub required_runs: f64,
    #[serde(rename = "rewardTypes", skip_serializing_if = "Option::is_none")]
    pub reward_types: Option<Vec<models::RewardType>>,
    #[serde(rename = "startString", skip_serializing_if = "Option::is_none")]
    pub start_string: Option<String>,
    #[serde(rename = "vsInfestation")]
    pub vs_infestation: bool,
}

impl Invasion {
    pub fn new(attacking_faction: String, completed: bool, completion: f64, count: f32, defending_faction: String, desc: String, node: String, required_runs: f64, vs_infestation: bool) -> Invasion {
        Invasion {
            id: None,
            activation: None,
            expiry: None,
            attacker: None,
            attacker_reward: None,
            attacking_faction,
            completed,
            completion,
            count,
            defender: None,
            defender_reward: None,
            defending_faction,
            desc,
            eta: None,
            node,
            node_key: None,
            required_runs,
            reward_types: None,
            start_string: None,
            vs_infestation,
        }
    }
}

