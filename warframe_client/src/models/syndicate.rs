/*
 * WarframeStat.us API
 *
 * Simple API for data from the game Warframe. [Parser Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts) 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Syndicate {
    #[serde(rename = "Arbiters of Hexis")]
    ArbitersOfHexis,
    #[serde(rename = "Cephalon Suda")]
    CephalonSuda,
    #[serde(rename = "Assassins")]
    Assassins,
    #[serde(rename = "Nightwave")]
    Nightwave,
    #[serde(rename = "Ostrons")]
    Ostrons,
    #[serde(rename = "Vox Solaris")]
    VoxSolaris,
    #[serde(rename = "Solaris United")]
    SolarisUnited,
    #[serde(rename = "Perrin Sequence")]
    PerrinSequence,
    #[serde(rename = "Steel Meridian")]
    SteelMeridian,
    #[serde(rename = "Red Veil")]
    RedVeil,
    #[serde(rename = "New Loka")]
    NewLoka,

}

impl std::fmt::Display for Syndicate {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ArbitersOfHexis => write!(f, "Arbiters of Hexis"),
            Self::CephalonSuda => write!(f, "Cephalon Suda"),
            Self::Assassins => write!(f, "Assassins"),
            Self::Nightwave => write!(f, "Nightwave"),
            Self::Ostrons => write!(f, "Ostrons"),
            Self::VoxSolaris => write!(f, "Vox Solaris"),
            Self::SolarisUnited => write!(f, "Solaris United"),
            Self::PerrinSequence => write!(f, "Perrin Sequence"),
            Self::SteelMeridian => write!(f, "Steel Meridian"),
            Self::RedVeil => write!(f, "Red Veil"),
            Self::NewLoka => write!(f, "New Loka"),
        }
    }
}

impl Default for Syndicate {
    fn default() -> Syndicate {
        Self::ArbitersOfHexis
    }
}

